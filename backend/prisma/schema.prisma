generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  name           String
  role           Role            @default(CLIENT)
  status         UserStatus      @default(PENDING)
  emailVerified  Boolean         @default(false)
  phone          String?
  location       String?
  company        String?
  industry       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastActiveAt   DateTime?
  analytics      Analytics[]
  chatbots       Chatbot[]
  notifications  Notification[]
  payments       Payment[]
  subscriptions  Subscription[]
  supportTickets SupportTicket[]

  @@map("users")
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Int
  currency      String         @default("NPR")
  billingCycle  String         @default("monthly")
  features      Json
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime
  endDate         DateTime?
  nextBillingDate DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  payments        Payment[]
  plan            SubscriptionPlan   @relation(fields: [planId], references: [id])
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Chatbot {
  id                  String         @id @default(cuid())
  userId              String
  name                String
  description         String?
  status              ChatbotStatus  @default(ACTIVE)
  welcomeMessage      String?
  fallbackMessage     String?
  responseDelay       Int            @default(2)
  maxRetries          Int            @default(3)
  aiModel             String         @default("gpt-3.5-turbo")
  temperature         Float          @default(0.7)
  maxTokens           Int            @default(150)
  contextWindow       Int            @default(5)
  chunkSize           Int            @default(1000)
  overlap             Int            @default(200)
  similarityThreshold Float          @default(0.7)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  analytics           Analytics[]
  channels            Channel[]
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chatbots")
}

model Channel {
  id          String      @id @default(cuid())
  chatbotId   String
  channel     ChannelType
  enabled     Boolean     @default(false)
  webhook     String?
  credentials Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chatbot     Chatbot     @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@unique([chatbotId, channel])
  @@map("channels")
}

model Customer {
  id            String         @id @default(cuid())
  name          String
  email         String?
  phone         String?
  location      String?
  source        CustomerSource
  status        CustomerStatus @default(ACTIVE)
  lastContactAt DateTime?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("customers")
}


model WhatsAppMessage {
  id          Int       @id @default(autoincrement())
  session_id  String    @db.VarChar(255)
  message     Json
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  client_id   String?
  customer_id String?

  @@map("whatsapp_messages")
}

model FacebookMessage {
  id          Int       @id @default(autoincrement())
  session_id  String    @db.VarChar(255)
  message     Json
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  client_id   String?
  customer_id String?

  @@map("facebook_messages")
}

model InstagramMessage {
  id          Int       @id @default(autoincrement())
  session_id  String    @db.VarChar(255)
  message     Json
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  client_id   String?
  customer_id String?

  @@map("instagram_messages")
}

model WebsiteMessage {
  id          Int       @id @default(autoincrement())
  session_id  String    @db.VarChar(255)
  message     Json
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  client_id   String?
  customer_id String?

  @@map("website_messages")
}

model TikTokMessage {
  id          Int       @id @default(autoincrement())
  session_id  String    @db.VarChar(255)
  message     Json
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  client_id   String?
  customer_id String?

  @@map("tiktok_messages")
}

model Document {
  id           String         @id @default(cuid())
  filename     String
  originalName String
  fileType     String
  fileSize     Int
  status       DocumentStatus @default(PROCESSING)
  description  String?
  vectorCount  Int            @default(0)
  metadata     Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  client_id    String?

  @@map("documents")
}

model Payment {
  id             String        @id @default(cuid())
  userId         String
  subscriptionId String?
  amount         Int
  currency       String        @default("NPR")
  status         PaymentStatus @default(PENDING)
  method         PaymentMethod
  transactionId  String?
  invoiceNumber  String?
  description    String?
  paidAt         DateTime?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model SupportTicket {
  id          String         @id @default(cuid())
  userId      String
  subject     String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    String
  assignedTo  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model Notification {
  id        String               @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  priority  NotificationPriority @default(MEDIUM)
  isRead    Boolean              @default(false)
  metadata  Json?
  createdAt DateTime             @default(now())
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Analytics {
  id                  String   @id @default(cuid())
  userId              String?
  chatbotId           String?
  date                DateTime
  totalMessages       Int      @default(0)
  activeConversations Int      @default(0)
  newCustomers        Int      @default(0)
  revenue             Int      @default(0)
  satisfactionRate    Int      @default(0)
  metadata            Json?
  createdAt           DateTime @default(now())
  chatbot             Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  user                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

enum Role {
  ADMIN
  CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum ChatbotStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum ChannelType {
  WHATSAPP
  FACEBOOK
  INSTAGRAM
  WEBSITE
  TIKTOK
}

enum CustomerSource {
  WHATSAPP
  FACEBOOK
  INSTAGRAM
  WEBSITE
  REFERRAL
  DIRECT
  TIKTOK
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PENDING
}


enum DocumentStatus {
  PROCESSING
  PROCESSED
  FAILED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  KHALTI
  ESEWA
  BANK_TRANSFER
  CASH
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  SYSTEM
  PAYMENT
  UPDATE
  ALERT
  SUPPORT
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
